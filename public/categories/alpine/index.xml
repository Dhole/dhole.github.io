<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alpine on Dhole&#39;s blog</title>
    <link>https://dhole.github.io/categories/alpine/</link>
    <description>Recent content in Alpine on Dhole&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Oct 2016 15:14:27 -0700</lastBuildDate>
    <atom:link href="https://dhole.github.io/categories/alpine/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Raspberry Pi: setting up alpine, lighttpd and letsencrypt</title>
      <link>https://dhole.github.io/post/raspberry_pi_alpine_lighttpd/</link>
      <pubDate>Fri, 21 Oct 2016 15:14:27 -0700</pubDate>
      
      <guid>https://dhole.github.io/post/raspberry_pi_alpine_lighttpd/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;In this post I will explain how to set up &lt;a href=&#34;https://alpinelinux.org/&#34;&gt;Alpine
Linux&lt;/a&gt; for the RPi, with the necessary configuration
for the RPi to power a USB hard drive, how to install lighttpd and configure
automatic renewal of TLS certificates with lestencrypt.&lt;/p&gt;

&lt;h1 id=&#34;alpine-linux&#34;&gt;Alpine Linux&lt;/h1&gt;

&lt;p&gt;Alpine Linux can be installed on te RPi following the &lt;a href=&#34;https://wiki.alpinelinux.org/wiki/Raspberry_Pi&#34;&gt;wiki
guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After instalation, we add a new user which we will use for logging in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adduser green
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After logging in with our new user (using password) we&amp;rsquo;ll add some ssh public
keys for future logins:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vi /home/green/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I will also download some configurations files for Vim and tmux:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl https://gitlab.com/dhole/dot_files/raw/master/.tmux.conf -o ~/.tmux.conf
curl https://gitlab.com/dhole/dot_files/raw/master/.airline_tmux -o ~/.airline_tmux
curl https://gitlab.com/dhole/dot_files/raw/master/.vimrc_basic -o ~/.vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we will log in as root and store the files persistently:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lbu add /home/green/.ssh/authorized_keys
lbu add /home/green/.vimrc
lbu add /home/green/.tmux.conf
lbu add /home/green/.airline_tmux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From now on everything will be done as root.  For convenience I open a tmux
session after logging in as my regular user, and get a root shell in one tmux
window.&lt;/p&gt;

&lt;p&gt;First we will configure the boot process of the RPI to allow the USB connections
to offer the maximum power allowed, otherwise the external hard drive will not
work properly.  We are also assigning the minimum amount of RAM to the GPU
because we&amp;rsquo;ll be using the RPI as a headless server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# remount sd-card writeable
mount -o remount,rw /media/mmcblk0p1

# create rpi2/3 config
cat &amp;lt;&amp;lt; EOF &amp;gt; /media/mmcblk0p1/usercfg.txt
disable_splash=1
boot_delay=0
start_x=0
max_usb_current=1
gpu_mem=16
EOF

sync
reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we install the required packages for our needs, and delete the default HTTP
server that comes with busybox.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apk add vim sudo openssl bash lighttpd-mod_auth rsync
apk del mini_httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I will use a script to decrypt the USB hard disk partition.  I will be running
this script manually every time I reboot the RPI.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; EOF &amp;gt; /root/startup.sh
#! /bin/sh

cryptsetup luksOpen /dev/sda1 disk
mkdir -p /mnt/disk
mount /dev/mapper/disk /mnt/disk/

rc-service lighttpd start
EOF

lbu add /root/startup.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;lighttpd&#34;&gt;Lighttpd&lt;/h1&gt;

&lt;p&gt;We run the previous script to mount the encrypted partition in &lt;code&gt;/mnt/disk&lt;/code&gt; and
we&amp;rsquo;ll move some private folders there:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/root/startup.sh
mkdir /mnt/disk/alpine-root
cd /mnt/disk/alpine-root
mkdir -p etc/dehydrated var/log/lighttpd var/www
ln -sf /mnt/disk/alpine-root/etc/dehydrated/ /etc/dehydrated
ln -sf /mnt/disk/alpine-root/var/www/ /var/www
ln -sf /mnt/disk/alpine-root/var/log/lighttpd /var/log/
chown -R lighttpd:lighttpd /var/log/lighttpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I want to enable HTTP auth for some paths in the HTTP server, so I&amp;rsquo;ll use a
script to add new triplets of user, realm and password.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir /etc/lighttpd/.htpasswd
cd /etc/lighttpd/.htpasswd/

cat &amp;lt;&amp;lt; EOF &amp;gt; hash.sh
#!/bin/sh
user=$1
realm=$2
pass=$3
hash=`echo -n &amp;quot;$user:$realm:$pass&amp;quot; | md5sum | cut -b -32`
echo &amp;quot;$user:$realm:$hash&amp;quot;
EOF

chmod 755 hash.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this I can add a username and password for the &amp;lsquo;private&amp;rsquo; realm.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./hash.sh &#39;username&#39; &#39;private&#39; &#39;password&#39; &amp;gt; /etc/lighttpd/.htpasswd/lighttpd-htdigest.username
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it&amp;rsquo;s time to configure lighttpd.  The file is already populated with the
default configuration, so I&amp;rsquo;m just showing the changes I added, copy them where
they belong as needed.  In the following configuration I&amp;rsquo;m configuring the
server to listen on port 80 to serve redirections to https; and I&amp;rsquo;m listening on
port 443 for the primary usage with sane security configurations.  I&amp;rsquo;ll be using
the certificate generated by the &lt;em&gt;dehydrated&lt;/em&gt; letsencrypt client, which will be
an elliptic curve key.  Finally I&amp;rsquo;m enabling http auth with the previous user
and password for all paths that start with &lt;code&gt;/private/&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim /etc/lighttpd/lighttpd.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;server.modules = (
...
    &amp;quot;mod_redirect&amp;quot;,
    &amp;quot;mod_access&amp;quot;,
    &amp;quot;mod_auth&amp;quot;,
    &amp;quot;mod_setenv&amp;quot;,
...
)
...
...
# {{{ includes
...
include &amp;quot;cgit.conf&amp;quot;
...
# }}}
...
...
$SERVER[&amp;quot;socket&amp;quot;] == &amp;quot;:443&amp;quot; {
  ssl.engine    = &amp;quot;enable&amp;quot;
  ssl.pemfile   = &amp;quot;/etc/dehydrated/certs/lizard.kyasuka.com/combined.pem&amp;quot;
  ssl.ca-file   = &amp;quot;/etc/dehydrated/certs/lizard.kyasuka.com/chain.pem&amp;quot;

  #### Mitigate BEAST attack:

  # A stricter base cipher suite. For details see:
  # http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-3389
  # or
  # http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3389

  ssl.cipher-list = &amp;quot;EECDH+AESGCM:EDH+AESGCM:AES128+EECDH:AES128+EDH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK&amp;quot;
  #
  # Make the server prefer the order of the server side cipher suite instead of the client suite.
  # This is necessary to mitigate the BEAST attack (unless you disable all non RC4 algorithms).
  # This option is enabled by default, but only used if ssl.cipher-list is set.
  ssl.honor-cipher-order = &amp;quot;enable&amp;quot;

  # Mitigate CVE-2009-3555 by disabling client triggered renegotiation
  # This option is enabled by default.
  #
  ssl.disable-client-renegotiation = &amp;quot;enable&amp;quot;
  #

  ssl.use-compression = &amp;quot;disable&amp;quot;
  ssl.use-sslv2 = &amp;quot;disable&amp;quot;
  ssl.use-sslv3 = &amp;quot;disable&amp;quot;

  ssl.dh-file = &amp;quot;/etc/ssl/dhparam.pem&amp;quot;
  ssl.ec-curve = &amp;quot;prime256v1&amp;quot;

  setenv.add-response-header = ( &amp;quot;Strict-Transport-Security&amp;quot; =&amp;gt; &amp;quot;max-age=15768000&amp;quot;) # six months
}
...
...
$HTTP[&amp;quot;url&amp;quot;] =~ &amp;quot;^/private/(.*)&amp;quot; {
  auth.backend = &amp;quot;htdigest&amp;quot;
  auth.backend.htdigest.userfile = &amp;quot;/etc/lighttpd/.htpasswd/lighttpd-htdigest.green&amp;quot;
  auth.require = ( &amp;quot;&amp;quot; =&amp;gt;
      (
      &amp;quot;method&amp;quot;  =&amp;gt; &amp;quot;digest&amp;quot;,
      &amp;quot;realm&amp;quot;   =&amp;gt; &amp;quot;private&amp;quot;,
      &amp;quot;require&amp;quot; =&amp;gt; &amp;quot;valid-user&amp;quot;
      ),
  )
}
...
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to protect against the &lt;a href=&#34;https://weakdh.org/&#34;&gt;Logjam Attack&lt;/a&gt; we&amp;rsquo;ll
generate a new Diffie-Hellman group of 4096 bits.  I first tried this on the RPi
but after 12h it hadn&amp;rsquo;t finished, so I did it on my laptop and transfered the
file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;openssl dhparam -out /etc/ssl/dhparam.pem 4096
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;letsencrypt&#34;&gt;Letsencrypt&lt;/h1&gt;

&lt;p&gt;Now we install the &lt;a href=&#34;https://github.com/lukas2511/dehydrated/&#34;&gt;dehydrated letsencrypt
client&lt;/a&gt;.  I&amp;rsquo;m choosing this one
instead of the official one to avoid pulling all the python dependencies, and to
avoid running it as root.  dehydrated is written entirely in bash.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir /mnt/disk/alpine-root/git
cd /mnt/disk/alpine-root/git/
git clone https://github.com/lukas2511/dehydrated

mkdir /etc/dehydrated
cp /mnt/disk/alpine-root/git/dehydrated/docs/examples/config /etc/dehydrated/config
mkdir -p /var/www/localhost/htdocs/.well-known/acme-challenge

chown lighttpd:lighttpd -R /var/www

lbu inc /var/www
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we edit the default dehydrated config to use a different path to store the
challenge and to generate elliptic curve keys, using the &lt;a href=&#34;https://www.prime256v1.com&#34;&gt;NIST P-256
curve&lt;/a&gt;.  I would have preferred using the &lt;a href=&#34;https://ed25519.cr.yp.to/&#34;&gt;Ed25519
curve&lt;/a&gt;, but it&amp;rsquo;s not yet part of the TLS standard :(&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim /etc/dehydrated/config
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;...
WELLKNOWN=&amp;quot;/var/www/localhost/htdocs/.well-known/acme-challenge/&amp;quot;
...
KEY_ALGO=prime256v1
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we add the list of domains and subdomains that we want plan to use.  Every
line should be a space separated list of subdomains belonging to the same
domain.  I&amp;rsquo;m only using one subdomain for one domain.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; EOF &amp;gt; /etc/dehydrated/domains.txt
lizard.kyasuka.com
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we run the letsencrypt client to generate and sign the certificates, and
generate a file with the private key and certificate that lighttpd will use.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chown lighttpd:lighttpd -R /etc/dehydrated/

sudo -u lighttpd /mnt/disk/alpine-root/git/dehydrated/dehydrated -c

sudo -u lighttpd cat /etc/dehydrated/certs/lizard.kyasuka.com/privkey.pem \
/etc/dehydrated/certs/lizard.kyasuka.com/cert.pem \
&amp;gt; /etc/dehydrated/certs/lizard.kyasuka.com/combined.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To automate the renewal process we&amp;rsquo;ll add an entry to the lighttpd user crontab.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo -u lighttpd crontab -e
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;42      5       *       *       *       /mnt/disk/alpine-root/git/dehydrated/dehydrated -c &amp;amp;&amp;amp; \
                                        cat /etc/dehydrated/certs/lizard.kyasuka.com/privkey.pem \
                                        /etc/dehydrated/certs/lizard.kyasuka.com/cert.pem \
                                        &amp;gt; /etc/dehydrated/certs/lizard.kyasuka.com/combined.pem &amp;amp;&amp;amp; \
                                        /mnt/disk/alpine-root/git/dehydrated/dehydrated -gc
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;last-details&#34;&gt;Last details&lt;/h1&gt;

&lt;p&gt;Finally, considering that Apline Linux runs from RAM we realize that if the RPi
powers off, we&amp;rsquo;ll lose al logs (except for lighttpd&amp;rsquo;s logs, which we are writing
directly to our encrypted partition).  It&amp;rsquo;s useful to read the logs after our
server goes down, so we add a crontab that will rsync the logs to the encrypted
parititon.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;crontab -e
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;...
...
*/15    *       *       *       *       ls /mnt/disk/alpine-root &amp;amp;&amp;amp; \
                                        rsync -a /var/log/dmesg /var/log/messages /mnt/disk/alpine-root/var/log/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, commit all the changes to store them permanently:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lbu commit
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Raspberry Pi 2 I/O benchmarks</title>
      <link>https://dhole.github.io/post/raspberry_pi_benchmarks/</link>
      <pubDate>Thu, 20 Oct 2016 15:03:12 -0700</pubDate>
      
      <guid>https://dhole.github.io/post/raspberry_pi_benchmarks/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m currently setting up a Raspberry Pi 2 as a home server for various services.
I&amp;rsquo;m gonna write a series of blog posts about how I configured my Raspberry Pi to
achieve my goals, which will be mainly setting up a git server and a backup
server.&lt;/p&gt;

&lt;h1 id=&#34;choice-of-distribution&#34;&gt;Choice of distribution&lt;/h1&gt;

&lt;p&gt;I discovered &lt;a href=&#34;https://alpinelinux.org/&#34;&gt;Alpine Linux&lt;/a&gt; while searching
lightweight distributions for the Raspberry Pi.  This is a lovely small Linux
distribution: one of the first things I noticed is how fast it runs on the RPi
due to using a ram filesystem by default; this is specially noticeable in the
RPi because usualy the operating system resides in the micro-SD card, which
usually offers really slow read and write operations.  Another really nice
feature is that it&amp;rsquo;s security-oriented, and as such the kernel is patched with
&lt;a href=&#34;https://www.grsecurity.net/&#34;&gt;grsecurity/PaX&lt;/a&gt; and the userland binaries (I
understand that means all packages- too) are compiled with hardening features:
&lt;a href=&#34;https://en.wikipedia.org/wiki/Position-independent_code&#34;&gt;Position Independent Executables
(PIE)&lt;/a&gt; and &lt;a href=&#34;http://wiki.osdev.org/Stack_Smashing_Protector&#34;&gt;stack
smashing protection&lt;/a&gt;.  This
distribution uses &lt;a href=&#34;https://www.musl-libc.org/&#34;&gt;musl libc&lt;/a&gt; instead of glib and
&lt;a href=&#34;https://busybox.net/&#34;&gt;busybox&lt;/a&gt; to provide all the basic utilities, decisions
that help making it small and lightweight.  I should also mention that OpenRC is
used for the init system (instead of following the current trend of switching to
systemd).&lt;/p&gt;

&lt;h1 id=&#34;personal-requirements&#34;&gt;Personal requirements&lt;/h1&gt;

&lt;p&gt;Now that I have choosen a distribution, I have a requierement for my setup: all
the personal data I store in the RPi (git repositories, backups, websites) must
be encrypted in the disk.&lt;/p&gt;

&lt;h1 id=&#34;benchmarks&#34;&gt;Benchmarks&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m mainly interested in how fast files can be written on the encrypted
partition.  This files will probably be comming from the network.&lt;/p&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;To achieve better I/O and to avoid damaging the micro-SD (or a USB stick) I&amp;rsquo;m
gonna use an external USB hard disk (western digital My Passport) for storage.&lt;/p&gt;

&lt;p&gt;The RPi will be connected to a 1 Gbps switch (which shouldn&amp;rsquo;t matter considering
that the Ethernet interface of all the RPis are &lt;sup&gt;10&lt;/sup&gt;&amp;frasl;&lt;sub&gt;100&lt;/sub&gt; Mbps).&lt;/p&gt;

&lt;h2 id=&#34;cryptsetup&#34;&gt;cryptsetup&lt;/h2&gt;

&lt;p&gt;This test will give us the encryption/decryption speeds running from memory, so
they represent an upper bound on the write speed that we can achieve in disk.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lizard:~/git/public/test.git$ cryptsetup benchmark
# Tests are approximate using memory only (no storage IO).
PBKDF2-sha1        42555 iterations per second for 256-bit key
PBKDF2-sha256      73635 iterations per second for 256-bit key
PBKDF2-sha512      33781 iterations per second for 256-bit key
PBKDF2-ripemd160   36408 iterations per second for 256-bit key
PBKDF2-whirlpool   11497 iterations per second for 256-bit key
#  Algorithm | Key |  Encryption |  Decryption
     aes-cbc   128b    12.6 MiB/s    14.8 MiB/s
 serpent-cbc   128b           N/A           N/A
 twofish-cbc   128b           N/A           N/A
     aes-cbc   256b    10.9 MiB/s    11.2 MiB/s
 serpent-cbc   256b           N/A           N/A
 twofish-cbc   256b           N/A           N/A
     aes-xts   256b    14.6 MiB/s    14.4 MiB/s
 serpent-xts   256b           N/A           N/A
 twofish-xts   256b           N/A           N/A
     aes-xts   512b    11.2 MiB/s    11.0 MiB/s
 serpent-xts   512b           N/A           N/A
 twofish-xts   512b           N/A           N/A
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My encrypted partition is using AES-XTS (this mode is the current
recommendation) with 256 bit keys, so we achieve &lt;strong&gt;14.6 MiB/s&lt;/strong&gt; and &lt;strong&gt;14.4
MiB/s&lt;/strong&gt; for encryption (write) and decryption (read).&lt;/p&gt;

&lt;h2 id=&#34;fat32-write-speed-dd&#34;&gt;FAT32 write speed (dd)&lt;/h2&gt;

&lt;p&gt;For a baseline comparison, I test the write speed of an unencrypted FAT32 file
system.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lizard:/mnt/slowpoke# time dd bs=1M count=4096 if=/dev/zero of=test conv=fsync
4096+0 records in
4095+1 records out
real    11m 28.47s
user    0m 0.08s
sys     0m 45.25s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The measurement of write speed is &lt;strong&gt;5.95 MB/s&lt;/strong&gt;.  That&amp;rsquo;s much lower than what I
was expecting.  I achieve write speeds of 40 MB/s from my laptop on the same
external disk.&lt;/p&gt;

&lt;h2 id=&#34;luks-ext4-write-speed-dd&#34;&gt;LUKS + ext4 write speed (dd)&lt;/h2&gt;

&lt;p&gt;This test should theoretically give upper bound results for my setup.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lizard:/mnt/wd_ext# time dd bs=1M count=4096 if=/dev/zero of=test conv=fsync
4096+0 records in
4096+0 records out
real    21m 23.27s
user    0m 0.07s
sys     0m 36.35s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s just &lt;strong&gt;3.19 MB/s&lt;/strong&gt;, which is extremely slow.&lt;/p&gt;

&lt;h2 id=&#34;luks-ext4-rsync&#34;&gt;LUKS + ext4 (rsync)&lt;/h2&gt;

&lt;p&gt;This test measures exactly one of my use cases, as I plan to use rsync for my
backups.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % rsync -v --progress movie.mp4 green-local:/mnt/disk/
movie.mp4
  1,991,346,871 100%    9.17MB/s    0:03:27 (xfr#1, to-chk=0/1)

sent 1,991,833,155 bytes  received 35 bytes  9,553,156.79 bytes/sec
total size is 1,991,346,871  speedup is 1.00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Surprisingly this one gives much better results than the &lt;code&gt;dd&lt;/code&gt; tests: &lt;strong&gt;9.11
MB/s&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;First of all, I don&amp;rsquo;t understand why the &lt;code&gt;dd&lt;/code&gt; tests performed so badly.  The
&lt;code&gt;fsync&lt;/code&gt; option should make sure that data is written to disk and not cached:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        conv=fsync      Physically write data out before finishing
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Maybe there&amp;rsquo;s a bug in busybox&amp;rsquo;s dd?  Or am I missing something?  I was
expecting to find the same speeds as LUKS encryption speeds here.&lt;/p&gt;

&lt;p&gt;The rsync test gives us the best performance we could expect, considering that
the limit comes from the 100 Mbit Ethernet, we won&amp;rsquo;t be able to transfer data at
higher speeds than ~10 MB/s.  In this case, the usage of disk encryption isn&amp;rsquo;t
making things slower.&lt;/p&gt;

&lt;p&gt;So overall I&amp;rsquo;m expecting to get transfer speeds (including writing to the
encrypted partition) of about &lt;strong&gt;9-10 MB/s&lt;/strong&gt;.  I&amp;rsquo;m happy with this and I believe
it should suit my needs, as I plan do backups every day in my local network.&lt;/p&gt;

&lt;p&gt;In the next post I will explain how to set up a git server with a web interface.
Stay tunned!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>